[{"/Users/kamildziekan/Desktop/Actualize/voice-command-app/src/index.js":"1","/Users/kamildziekan/Desktop/Actualize/voice-command-app/src/App.js":"2","/Users/kamildziekan/Desktop/Actualize/voice-command-app/src/reportWebVitals.js":"3"},{"size":500,"mtime":1611955131811,"results":"4","hashOfConfig":"5"},{"size":2584,"mtime":1611960626750,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1611955131812,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ljt8gw",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/kamildziekan/Desktop/Actualize/voice-command-app/src/index.js",[],["16","17"],"/Users/kamildziekan/Desktop/Actualize/voice-command-app/src/App.js",["18"],"import './App.css';\nimport { useEffect, useState } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\nfunction App() {\n\n  // SpeechRecognition.startListening({ continuous: true })\n  const { resetTranscript } = useSpeechRecognition()\n  const [message, setMessage] = useState('')\n  const commands = [\n    {\n      command: 'I would like to order *',\n      callback: (food) => setMessage(`Your order is for: ${food}`)\n    },\n    {\n      command: 'The weather is :condition today',\n      callback: (condition) => setMessage(`Today, the weather is ${condition}`)\n    },\n    {\n      command: 'My top sports are * and *',\n      callback: (sport1, sport2) => setMessage(`#1: ${sport1}, #2: ${sport2}`)\n    },\n    {\n      command: 'Pass the salt (please)',\n      callback: () => setMessage('My pleasure')\n    },\n    {\n      command: ['Hello', 'Hi'],\n      callback: ({ command }) => setMessage(`Hi there! You said: \"${command}\"`),\n      matchInterim: true\n    },\n    {\n      command: ['Hello Jarvis', 'Hi Jarvis'],\n      callback: ({ command }) => setMessage(`Welcome Back! Master Kamil `),\n      matchInterim: true\n    },\n    {\n      command: 'Beijing',\n      callback: (command, spokenPhrase, similarityRatio) => setMessage(`${command} and ${spokenPhrase} are ${similarityRatio * 100}% similar`),\n      // If the spokenPhrase is \"Benji\", the message would be \"Beijing and Benji are 40% similar\"\n      isFuzzyMatch: true,\n      fuzzyMatchingThreshold: 0.2\n    },\n    {\n      command: ['eat', 'sleep', 'leave'],\n      callback: (command) => setMessage(`Best matching command: ${command}`),\n      isFuzzyMatch: true,\n      fuzzyMatchingThreshold: 0.2,\n      bestMatchOnly: true\n    },\n    {\n      command: 'clear',\n      callback: ({ resetTranscript }) => resetTranscript()\n    },\n    // {\n    //   command: ['*'],\n    //   callback: ({ command }) => setMessage(`Not compute `),\n    //   // matchInterim: true\n    // },\n  ]\n\n\n  useEffect(() => {\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n      alert(\"Ups, your browser is not supported!\");\n    }\n  }, []);\n\n  const { transcript } = useSpeechRecognition({ commands })\n  return (\n    <div>\n      {/* <h3>Hello World!</h3> */}\n      <h2>{message}</h2>\n      <h2>{transcript}</h2>\n      {/* <p>{transcript ? transcript : 'Start listening for transcript'}</p> */}\n\n      <button onClick={SpeechRecognition.startListening}>Start listening</button>\n    &nbsp;\n      <button onClick={SpeechRecognition.stopListening}>Stop listening</button>\n    </div>\n\n  );\n}\n\nexport default App;\n\n","/Users/kamildziekan/Desktop/Actualize/voice-command-app/src/reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":8,"column":11,"nodeType":"25","messageId":"26","endLine":8,"endColumn":26},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'resetTranscript' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]